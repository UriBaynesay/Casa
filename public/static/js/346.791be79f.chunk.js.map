{"version":3,"file":"static/js/346.791be79f.chunk.js","mappings":"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","sources":["services/order.service.js","cmps/user-orders-cmps/user-order-preview.jsx","cmps/user-orders-cmps/user-orders-list.jsx","cmps/user-orders-cmps/user-orders-stats.jsx","views/user-orders.jsx"],"sourcesContent":["import { httpService } from \"./http.service\"\r\n\r\nconst END_POINT = \"order\"\r\n\r\nexport const orderService = {\r\n  query,\r\n  saveOrder,\r\n  getById,\r\n  remove,\r\n  getUserOrdersStats,\r\n}\r\n\r\n// you can pass in filterBy {userId,hostId,stayId}\r\nasync function query(filterBy) {\r\n  try {\r\n    const orders = await httpService.get(END_POINT, filterBy)\r\n    return orders\r\n  } catch (error) {\r\n    throw error.data\r\n  }\r\n}\r\n\r\nasync function getById(orderId) {\r\n  try {\r\n    const order = await httpService.get(`${END_POINT}/${orderId}`)\r\n    return order\r\n  } catch (error) {\r\n    throw error.data\r\n  }\r\n}\r\n\r\nasync function remove(orderId) {\r\n  try {\r\n    return await httpService.delete(`${END_POINT}/${orderId}`)\r\n  } catch (error) {\r\n    throw error.data\r\n  }\r\n}\r\n\r\n// to add an order you have to give {stayId,hostId,startDate,endDate}\r\nasync function saveOrder(order) {\r\n  if (!order._id) {\r\n    try {\r\n      const newOrder = await httpService.post(END_POINT, order)\r\n      return newOrder\r\n    } catch (error) {\r\n      throw error.data\r\n    }\r\n  }\r\n  try {\r\n    const updatedOrder = await httpService.put(\r\n      `${END_POINT}/${order._id}`,\r\n      order\r\n    )\r\n    return updatedOrder\r\n  } catch (error) {\r\n    throw error.data\r\n  }\r\n}\r\n\r\nfunction getUserOrdersStats(orders) {\r\n  const stats = {}\r\n  if (!orders)\r\n    return {\r\n      avgRating: 0,\r\n      totalRevenue: 0,\r\n      ordersStatus: {\r\n        total: 0,\r\n        pending: 0,\r\n        accepted: 0,\r\n        declined: 0,\r\n      },\r\n    }\r\n  stats.avgRating = _getAvgRating(orders)\r\n  stats.totalRevenue = _getTotalRevenue(orders)\r\n  stats.ordersStatus = _getOrdersStatus(orders)\r\n  return stats\r\n}\r\n\r\nfunction _getAvgRating(orders) {\r\n  const sum = orders.reduce((acc, order) => {\r\n    return acc + order.stay.reviewScores.rating\r\n  }, 0)\r\n  return sum / orders.length\r\n}\r\n\r\nfunction _getTotalRevenue(orders) {\r\n  return orders.reduce((acc, order) => {\r\n    if (order.status === \"accepted\") return acc + order.price\r\n    return acc\r\n  }, 0)\r\n}\r\n\r\nfunction _getOrdersStatus(orders) {\r\n  return orders.reduce(\r\n    (acc, order) => {\r\n      acc[\"total\"]++\r\n      if (order.status === \"pending\") acc[\"pending\"]++\r\n      else if (order.status === \"accepted\") acc[\"accepted\"]++\r\n      else if (order.status === \"declined\") acc[\"declined\"]++\r\n      return acc\r\n    },\r\n    {\r\n      total: 0,\r\n      pending: 0,\r\n      accepted: 0,\r\n      declined: 0,\r\n    }\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport const UserOrderPreview = ({ order, onUpdateOrder }) => {\r\n  return (\r\n    <article className=\"order-preview-container\">\r\n      <div className=\"stay-name\">{order.stay.name}</div>\r\n      <div className=\"user-fullname\">{order.byUser.fullname}</div>\r\n      <div className=\"order-total\">{order.price} $</div>\r\n      <div className=\"order-start-date\">\r\n        {new Date(order.startDate).toLocaleDateString()}\r\n      </div>\r\n      <div className=\"order-end-date\">\r\n        {new Date(order.endDate).toLocaleDateString()}\r\n      </div>\r\n      <div className=\"order-status\">{order.status}</div>\r\n      <div className=\"action-container\">\r\n        <button\r\n          className=\"accept-btn\"\r\n          disabled={order.status === \"accepted\" ? true : false}\r\n          onClick={() => onUpdateOrder(order, \"accepted\")}\r\n        >\r\n          <div>Accept</div>\r\n        </button>\r\n        <button\r\n          className=\"decline-btn\"\r\n          disabled={order.status === \"declined\" ? true : false}\r\n          onClick={() => onUpdateOrder(order, \"declined\")}\r\n        >\r\n          <div>Decline</div>\r\n        </button>\r\n      </div>\r\n    </article>\r\n  )\r\n}\r\n","import { UserOrderPreview } from \"./user-order-preview\"\r\n\r\nexport const UserOrdersList = ({ orders, onUpdateOrder }) => {\r\n  return (\r\n    <div className=\"user-orders-list-container\">\r\n      {orders.map((order) => {\r\n        return (\r\n          <UserOrderPreview\r\n            key={order._id}\r\n            order={order}\r\n            onUpdateOrder={onUpdateOrder}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n","import { orderService } from \"../../services/order.service\"\r\n\r\nexport const UserOrdersStats = ({ orders }) => {\r\n  const userOrdersStats = orderService.getUserOrdersStats(orders)\r\n  return (\r\n    <div className=\"stats-container\">\r\n      <div className=\"avg-rating-container\">\r\n        <h1>Avg rating</h1>\r\n        <h3>{userOrdersStats.avgRating}</h3>\r\n      </div>\r\n      <div className=\"total-revenue-container\">\r\n        <h1>Total revenue</h1>\r\n        <h3>$ {userOrdersStats.totalRevenue}</h3>\r\n      </div>\r\n      <div className=\"orders-status-container\">\r\n        <div className=\"total-orders-container\">\r\n          <h1>Total</h1>\r\n          <h3>{userOrdersStats.ordersStatus[\"total\"]}</h3>\r\n        </div>\r\n        <div className=\"pending-orders-container\">\r\n          <h1>Pending</h1>\r\n          <h3>{userOrdersStats.ordersStatus[\"pending\"]}</h3>\r\n        </div>\r\n        <div className=\"total-accepted-container\">\r\n          <h1>Accepted</h1>\r\n          <h3>{userOrdersStats.ordersStatus[\"accepted\"]}</h3>\r\n        </div>\r\n        <div className=\"declined-accepted-container\">\r\n          <h1>Declined</h1>\r\n          <h3>{userOrdersStats.ordersStatus[\"declined\"]}</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { Fragment, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nimport { orderService } from \"../services/order.service\"\r\nimport {\r\n  socketService,\r\n  SOCKET_EVENT_NEW_ORDER,\r\n  SOCKET_EVENT_UPDATED_ORDER,\r\n} from \"../services/socket.service\"\r\nimport { UserOrdersList } from \"../cmps/user-orders-cmps/user-orders-list\"\r\nimport { UserOrdersStats } from \"../cmps/user-orders-cmps/user-orders-stats\"\r\nimport { updateUserNotification } from \"../store/action/user.action\"\r\nimport { AppHeader } from \"../cmps/app-header\"\r\n\r\nconst UserOrders = () => {\r\n  const [orders, setOrders] = useState([])\r\n  const tableTitles = [\r\n    { class: \"stay-name-title\", title: \"Stay name\" },\r\n    { class: \"user-fullname-title\", title: \"Guest name\" },\r\n    { class: \"order-total-title\", title: \"Order total\" },\r\n    { class: \"order-start-date-title\", title: \"Start date\" },\r\n    { class: \"order-end-date-title\", title: \"End date\" },\r\n    { class: \"order-status-title\", title: \"Order status\" },\r\n    { class: \"action-title\", title: \"Actions\" },\r\n  ]\r\n  const { user } = useSelector((storeState) => storeState.userModule)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    socketService.on(SOCKET_EVENT_NEW_ORDER, loadUserOrders)\r\n    socketService.on(SOCKET_EVENT_UPDATED_ORDER, loadUserOrders)\r\n    if (user) {\r\n      dispatch(updateUserNotification(false))\r\n      if (!orders.length) loadUserOrders()\r\n    }\r\n\r\n    return () => {\r\n      socketService.off(SOCKET_EVENT_NEW_ORDER, loadUserOrders)\r\n      socketService.off(SOCKET_EVENT_UPDATED_ORDER, loadUserOrders)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const loadUserOrders = async () => {\r\n    try {\r\n      const userOrders = await orderService.query({ hostId: user._id })\r\n      if (userOrders.length) setOrders(userOrders)\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  const onUpdateOrder = async (order, status) => {\r\n    const updatedOrder = { ...order, status }\r\n    try {\r\n      await orderService.saveOrder(updatedOrder)\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AppHeader />\r\n      <main className=\"user-profile main-layout\">\r\n        <section className=\"user-orders-container\">\r\n          {orders.length ? <UserOrdersStats orders={orders} /> : \"\"}\r\n          <h2 className=\"order-title\">Orders for your stays</h2>\r\n          {orders.length ? (\r\n            <Fragment>\r\n              <div className=\"user-orders-table-titles-container\">\r\n                {tableTitles.map((title) => (\r\n                  <h4 className={title.class} key={title.title}>\r\n                    {title.title}\r\n                  </h4>\r\n                ))}\r\n              </div>\r\n              <UserOrdersList orders={orders} onUpdateOrder={onUpdateOrder} />\r\n            </Fragment>\r\n          ) : (\r\n            <p>No orders</p>\r\n          )}\r\n        </section>\r\n      </main>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserOrders"],"names":["END_POINT","orderService","query","saveOrder","getById","remove","getUserOrdersStats","orders","stats","avgRating","_getAvgRating","totalRevenue","_getTotalRevenue","ordersStatus","_getOrdersStatus","total","pending","accepted","declined","filterBy","httpService","data","orderId","order","_id","newOrder","updatedOrder","reduce","acc","stay","reviewScores","rating","length","status","price","UserOrderPreview","onUpdateOrder","className","name","byUser","fullname","Date","startDate","toLocaleDateString","endDate","disabled","onClick","UserOrdersList","map","UserOrdersStats","userOrdersStats","useState","setOrders","user","useSelector","storeState","userModule","dispatch","useDispatch","useEffect","socketService","SOCKET_EVENT_NEW_ORDER","loadUserOrders","SOCKET_EVENT_UPDATED_ORDER","updateUserNotification","hostId","userOrders","console","error","Fragment","class","title"],"sourceRoot":""}