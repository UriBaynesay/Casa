{"version":3,"file":"static/js/702.89d9fda9.chunk.js","mappings":"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","sources":["services/order.service.js","cmps/user-trips-cmps/user-trip-preview.jsx","cmps/user-trips-cmps/user-trips-list.jsx","views/user-trips.jsx"],"sourcesContent":["import { httpService } from \"./http.service\"\r\n\r\nconst END_POINT = \"order\"\r\n\r\nexport const orderService = {\r\n  query,\r\n  saveOrder,\r\n  getById,\r\n  remove,\r\n  getUserOrdersStats,\r\n}\r\n\r\n// you can pass in filterBy {userId,hostId,stayId}\r\nasync function query(filterBy) {\r\n  try {\r\n    const orders = await httpService.get(END_POINT, filterBy)\r\n    return orders\r\n  } catch (error) {\r\n    throw error.data\r\n  }\r\n}\r\n\r\nasync function getById(orderId) {\r\n  try {\r\n    const order = await httpService.get(`${END_POINT}/${orderId}`)\r\n    return order\r\n  } catch (error) {\r\n    throw error.data\r\n  }\r\n}\r\n\r\nasync function remove(orderId) {\r\n  try {\r\n    return await httpService.delete(`${END_POINT}/${orderId}`)\r\n  } catch (error) {\r\n    throw error.data\r\n  }\r\n}\r\n\r\n// to add an order you have to give {stayId,hostId,startDate,endDate}\r\nasync function saveOrder(order) {\r\n  if (!order._id) {\r\n    try {\r\n      const newOrder = await httpService.post(END_POINT, order)\r\n      return newOrder\r\n    } catch (error) {\r\n      throw error.data\r\n    }\r\n  }\r\n  try {\r\n    const updatedOrder = await httpService.put(\r\n      `${END_POINT}/${order._id}`,\r\n      order\r\n    )\r\n    return updatedOrder\r\n  } catch (error) {\r\n    throw error.data\r\n  }\r\n}\r\n\r\nfunction getUserOrdersStats(orders) {\r\n  const stats = {}\r\n  if (!orders)\r\n    return {\r\n      avgRating: 0,\r\n      totalRevenue: 0,\r\n      ordersStatus: {\r\n        total: 0,\r\n        pending: 0,\r\n        accepted: 0,\r\n        declined: 0,\r\n      },\r\n    }\r\n  stats.avgRating = _getAvgRating(orders)\r\n  stats.totalRevenue = _getTotalRevenue(orders)\r\n  stats.ordersStatus = _getOrdersStatus(orders)\r\n  return stats\r\n}\r\n\r\nfunction _getAvgRating(orders) {\r\n  const sum = orders.reduce((acc, order) => {\r\n    return acc + order.stay.reviewScores.rating\r\n  }, 0)\r\n  return sum / orders.length\r\n}\r\n\r\nfunction _getTotalRevenue(orders) {\r\n  return orders.reduce((acc, order) => {\r\n    if (order.status === \"accepted\") return acc + order.price\r\n    return acc\r\n  }, 0)\r\n}\r\n\r\nfunction _getOrdersStatus(orders) {\r\n  return orders.reduce(\r\n    (acc, order) => {\r\n      acc[\"total\"]++\r\n      if (order.status === \"pending\") acc[\"pending\"]++\r\n      else if (order.status === \"accepted\") acc[\"accepted\"]++\r\n      else if (order.status === \"declined\") acc[\"declined\"]++\r\n      return acc\r\n    },\r\n    {\r\n      total: 0,\r\n      pending: 0,\r\n      accepted: 0,\r\n      declined: 0,\r\n    }\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport const UserTripPreview = ({ trip, onUpdateOrder }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"stay-name\">{trip.stay.name}</div>\r\n      <div className=\"stay-address\">{trip.stay.address.street}</div>\r\n      <div className=\"host-fullname\">{trip.stay.host.fullname}</div>\r\n      <div className=\"trip-total\">$ {trip.price}</div>\r\n      <div className=\"trip-start-date\">\r\n        {new Date(trip.startDate).toLocaleDateString()}\r\n      </div>\r\n      <div className=\"trip-end-date\">\r\n        {new Date(trip.endDate).toLocaleDateString()}\r\n      </div>\r\n      <div className=\"trip-status\">{trip.status}</div>\r\n      <div className=\"action-container\">\r\n        <button\r\n          className=\"decline-btn\"\r\n          disabled={trip.status === \"declined\" ? true : false}\r\n          onClick={() => onUpdateOrder(trip, \"declined\")}\r\n        >\r\n          <div>Cancel</div>\r\n        </button>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { UserTripPreview } from \"./user-trip-preview\"\r\n\r\nexport const UserTripsList = ({ trips, onUpdateOrder }) => {\r\n  const tableTitles = [\r\n    { class: \"stay-name-title\", title: \"Stay name\" },\r\n    { class: \"stay-address-title\", title: \"Stay address\" },\r\n    { class: \"user-fullname-title\", title: \"Owner name\" },\r\n    { class: \"order-total-title\", title: \"Order total\" },\r\n    { class: \"order-start-date-title\", title: \"Start date\" },\r\n    { class: \"order-end-date-title\", title: \"End date\" },\r\n    { class: \"order-status\", title: \"Status\" },\r\n    { class: \"action-title\", title: \"Actions\" },\r\n  ]\r\n  return (\r\n    <section className=\"user-trips-list-container\">\r\n      <div className=\"user-trips-table-titles-container\">\r\n        {tableTitles.map((title) => (\r\n          <h4 className={title.class}>{title.title}</h4>\r\n        ))}\r\n      </div>\r\n      {trips.map((trip) => {\r\n        return (\r\n          <div className=\"user-trip-preview-container\">\r\n            <UserTripPreview trip={trip} onUpdateOrder={onUpdateOrder} />\r\n          </div>\r\n        )\r\n      })}\r\n    </section>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\nimport { UserTripsList } from \"../cmps/user-trips-cmps/user-trips-list\"\r\nimport {\r\n  socketService,\r\n  SOCKET_EVENT_UPDATED_ORDER,\r\n} from \"../services/socket.service\"\r\nimport { orderService } from \"../services/order.service\"\r\nimport { AppHeader } from \"../cmps/app-header\"\r\n\r\nconst UserTrips = () => {\r\n  const [trips, setTrips] = useState([])\r\n  const { user } = useSelector((storeState) => storeState.userModule)\r\n\r\n  useEffect(() => {\r\n    socketService.on(SOCKET_EVENT_UPDATED_ORDER, loadTrips)\r\n    loadTrips()\r\n    return () => {\r\n      socketService.off(SOCKET_EVENT_UPDATED_ORDER, loadTrips)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const loadTrips = async () => {\r\n    const userTrips = await orderService.query({ userId: user._id })\r\n    setTrips(userTrips)\r\n  }\r\n\r\n  const onUpdateOrder = async (order, status) => {\r\n    const updatedOrder = { ...order, status }\r\n    try {\r\n      await orderService.saveOrder(updatedOrder)\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AppHeader />\r\n      <main className=\"user-profile main-layout\">\r\n        <section className=\"user-trips-container\">\r\n          <h2>Your trips</h2>\r\n          {trips.length ? (\r\n            <UserTripsList trips={trips} onUpdateOrder={onUpdateOrder} />\r\n          ):<p>No trips</p>}\r\n        </section>\r\n      </main>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserTrips"],"names":["END_POINT","orderService","query","saveOrder","getById","remove","getUserOrdersStats","orders","stats","avgRating","_getAvgRating","totalRevenue","_getTotalRevenue","ordersStatus","_getOrdersStatus","total","pending","accepted","declined","filterBy","httpService","data","orderId","order","_id","newOrder","updatedOrder","reduce","acc","stay","reviewScores","rating","length","status","price","UserTripPreview","trip","onUpdateOrder","className","name","address","street","host","fullname","Date","startDate","toLocaleDateString","endDate","disabled","onClick","UserTripsList","trips","class","title","map","useState","setTrips","user","useSelector","storeState","userModule","useEffect","socketService","SOCKET_EVENT_UPDATED_ORDER","loadTrips","userId","userTrips","console","error"],"sourceRoot":""}